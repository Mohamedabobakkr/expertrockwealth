generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Lead {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String
  email     String
  phone     String?
  company   String?
  services  String[]
  budgetMin Int?       @map("budget_min")
  budgetMax Int?       @map("budget_max")
  timeline  String?
  notes     String?    @db.Text
  source    String?
  locale    String     @default("en")
  status    LeadStatus @default(NEW)

  @@map("leads")
}

model EventLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  type      String
  payload   Json
  userAgent String?  @map("user_agent")
  ipHash    String?  @map("ip_hash")

  @@map("event_logs")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  consent   Boolean  @default(true)

  @@map("newsletter_subscribers")
}

model ContactMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  email     String
  message   String   @db.Text

  @@map("contact_messages")
}

enum Role {
  USER
  ADMIN
}

enum LeadStatus {
  NEW
  QUALIFIED
  WON
  LOST
}